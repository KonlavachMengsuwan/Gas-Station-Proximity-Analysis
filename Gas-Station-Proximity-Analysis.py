# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nkOs4ncOuIAetX_I9Ks2oyhh9pFEvPgX
"""

cd

# Importing necessary libraries
import geopandas as gpd
from shapely.geometry import Point
import random
import matplotlib.pyplot as plt

# File paths
gas_station_geojson_path = 'Gas_Stations.geojson'
study_area_geojson_path = 'Study_Area.geojson'
osm_roads_geojson_path = 'OSM_Roads_StudyArea.geojson'

# Reading the GeoJSON files using geopandas
gas_stations_gdf = gpd.read_file(gas_station_geojson_path)
study_area_gdf = gpd.read_file(study_area_geojson_path)
osm_roads_gdf = gpd.read_file(osm_roads_geojson_path)

# Function to create a random point on a random line (road segment)
def create_random_point_on_road(roads_gdf):
    # Selecting a random road segment
    random_road = roads_gdf.sample(1).iloc[0]['geometry']

    # Generating a random point along the road segment
    random_point_on_road = random_road.interpolate(random.random(), normalized=True)

    return Point(random_point_on_road)

# Creating a random point on the OSM roads
random_point = create_random_point_on_road(osm_roads_gdf)

# Creating a GeoDataFrame for the random point
random_point_gdf = gpd.GeoDataFrame(geometry=[random_point], crs=osm_roads_gdf.crs)

import matplotlib.pyplot as plt

# Plotting the OSM roads (in light gray) first
fig, ax = plt.subplots(figsize=(10, 10))
osm_roads_gdf.plot(ax=ax, color='#B0B0B0', linewidth=0.5)

# Plotting the study area boundary (in light blue)
study_area_gdf.boundary.plot(ax=ax, color='#ADD8E6', linewidth=2)

# Plotting the gas stations (in light red) on top of the roads
gas_stations_gdf.plot(ax=ax, color='#FFA07A', markersize=50, zorder=2)

# Plotting the random point (in Red) on top of the roads
random_point_gdf.plot(ax=ax, color='#D82C08', markersize=100, zorder=3)

# Setting the axis to be equal, so the plot is in the true projection
ax.set_aspect('equal')

# Displaying the plot
plt.show()

import networkx as nx
from shapely.geometry import LineString

# Function to convert multi-line geometries into individual line segments
def add_edges_from_linestring(graph, linestring, weight):
    for i in range(len(linestring.coords) - 1):
        graph.add_edge(linestring.coords[i], linestring.coords[i + 1], weight=weight)

# Function to find the nearest node in the graph for a given point
def nearest_node(graph, point):
    return min(graph.nodes, key=lambda node: point.distance(Point(node)))

# Creating a new graph
G = nx.Graph()
for _, row in osm_roads_gdf.iterrows():
    if row.geometry.geom_type == 'MultiLineString':
        for line in row.geometry.geoms:
            add_edges_from_linestring(G, line, weight=line.length)
    else:
        add_edges_from_linestring(G, row.geometry, weight=row.geometry.length)

# Function to calculate the shortest path using Dijkstra's algorithm
def shortest_path_to_gas_station(graph, source_node, target_node):
    return nx.shortest_path_length(graph, source=source_node, target=target_node, weight='weight')

# Finding the nearest node for the random point
random_point_node = nearest_node(G, random_point)

# Finding the nearest nodes for each gas station
gas_stations_gdf['nearest_node'] = gas_stations_gdf['geometry'].apply(lambda x: nearest_node(G, x))

# Adding the random point as a node in the graph
G.add_node(random_point_node)

# Adding an edge from the random point to the nearest node on the road
nearest_road_node = nearest_node(G, Point(random_point_node))
G.add_edge(random_point_node, nearest_road_node, weight=Point(random_point_node).distance(Point(nearest_road_node)))

# Calculate the shortest path for each gas station
gas_stations_gdf['distance_to_random_point'] = gas_stations_gdf['nearest_node'].apply(
    lambda x: shortest_path_to_gas_station(G, random_point_node, x))

# Identify the nearest gas station
nearest_gas_station = gas_stations_gdf.loc[gas_stations_gdf['distance_to_random_point'].idxmin()]

# Create a GeoDataFrame for the route to the nearest gas station
route_to_nearest_gas_station = nx.shortest_path(G, source=random_point_node, target=nearest_gas_station['nearest_node'], weight='weight')
route_line = LineString(route_to_nearest_gas_station)
route_gdf = gpd.GeoDataFrame(geometry=[route_line], crs=osm_roads_gdf.crs)

# Plotting the OSM roads (in light gray)
fig, ax = plt.subplots(figsize=(10, 10))
osm_roads_gdf.plot(ax=ax, color='#B0B0B0', linewidth=0.5)

# Plotting the study area boundary (in light blue)
study_area_gdf.boundary.plot(ax=ax, color='#ADD8E6', linewidth=2)

# Plotting the gas stations (in light red)
gas_stations_gdf.plot(ax=ax, color='#FFA07A', markersize=50, zorder=2)

# Plotting the random point (in Red)
random_point_gdf.plot(ax=ax, color='#D82C08', markersize=100, zorder=3)

# Plotting the route to the nearest gas station (in Green)
route_gdf.plot(ax=ax, color='#32CD32', linewidth=2, zorder=4)

# Setting the axis to be equal
ax.set_aspect('equal')

# Displaying the plot
plt.show()